"""
1-Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""
def factorial(num):
    # Caso base
    if num == 0:
        return 1
    else:
        # Paso recursivo
        return num * factorial(num-1)

# Demostraci√≥n del factorial
n = int(input("[Factorial] Ingrese un n√∫mero entero no negativo: "))
print(f"Factoriales desde 0 hasta {n}:")
for i in range(n + 1):
    print(f"  {i} = {factorial(i)}")

"""
2-Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique.
"""

def fibonacci(pos):
    # Caso base
    if pos == 0:
        return 0
    elif pos == 1:
        return 1
    # Paso recursivo
    else:
        return fibonacci(pos-1) + fibonacci(pos-2)

# Demostraci√≥n de Fibonacci
m = int(input("\n[Fibonacci] Ingrese la posici√≥n m√°xima: "))
print(f"Serie de Fibonacci hasta F({m}):")
for i in range(m + 1):
    print(f"  F({i}) = {fibonacci(i)}")

"""
3-Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõùëö = ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un
algoritmo general
"""

def potencia(base, exponente):
    # Caso base
    if exponente == 0:
        return 1
    elif exponente > 0:
        # Exponente positivo
        return base * potencia(base, exponente-1)
    else:
        # Exponente negativo: invertir
        return 1 / potencia(base, -exponente)

# Demostraci√≥n de la potencia
b = int(input("\n[Potencia] Introduce la base: "))
e = int(input("[Potencia] Introduce el exponente: "))
print(f"{b}^{e} = {potencia(b, e)}")

"""
4-Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto
"""

def decimal_a_binario(num):
    # Caso base
    if num == 0:
        return "0"
    elif num == 1:
        return "1"
    else:
        # Paso recursivo:
        return decimal_a_binario(num//2) + str(num % 2)

# Demostraci√≥n de la conversi√≥n a binario
x = int(input("\n[Binario] Introduce un entero no negativo: "))
print(f"  {x} en binario es {decimal_a_binario(x)}")

"""
5-Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()
"""

def es_palindromo(palabra):
    # Caso base:
    if len(palabra) <= 1:
        return True
    # Si extremos difieren, no es pal√≠ndromo
    if palabra[0] != palabra[-1]:
        return False
    # Paso recursivo
    return es_palindromo(palabra[1:-1])

# Demostraci√≥n de pal√≠ndromos
ejemplos = [
        "radar",
        "reconocer",
        "palabra",
        "python",
    ]
print("\n[Pal√≠ndromo] Ejemplos:")
for palabra in ejemplos:
    print(f"La palabra {palabra} es palindromo? {es_palindromo(palabra)}")

"""
6-Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4)
suma_digitos(9)      ‚Üí 9
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)
"""

def suma_digitos(n):
    # Caso base
    if n < 10:
        return n
    else:
        # Paso recursivo
        return (n % 10) + suma_digitos(n // 10)

# Demostraci√≥n de suma de d√≠gitos
ejemplos = [1234, 9, 305, 0]
print("\n[Suma D√≠gitos] Ejemplos:")
for num in ejemplos:
    print(f"La suma de los digitos {num} es: {suma_digitos(num)}")

"""
7-Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.

Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.

Ejemplos:
contar_bloques(1)   ‚Üí 1         (1)
contar_bloques(2)   ‚Üí 3         (2 + 1)
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)
"""

def contar_bloques(n):
    # Caso base
    if n == 1:
        return 1
    else:
        # Paso recursivo
        return n + contar_bloques(n-1)

# Demostraci√≥n de contar bloques
bloques = [1, 2, 3, 4, 10]
print("\n[Contar Bloques] Ejemplos:")
for x in bloques:
    print(f"Para {x} bloques en el primer nivel, necesita {contar_bloques(x)} bloques en total")

"""
8-Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
contar_digito(12233421, 2)   ‚Üí 3
contar_digito(5555, 5)       ‚Üí 4
contar_digito(123456, 7)     ‚Üí 0
"""

def contar_digito(numero, digito):
    # Caso base
    if numero < 10:
        if numero == digito:
            return 1
        else:
            return 0
    # Contar en el √∫ltimo d√≠gito y sumar recursi√≥n en el resto
    elif numero % 10 == digito:
        actual = 1
    else:
        actual = 0
    return actual + contar_digito(numero // 10, digito)

# Demostraci√≥n de contar d√≠gitos
ejemplos = [
        (12233421, 2),
        (5555, 5),
        (123456, 7),
        (70707, 0),
    ]
print("\n[Contar D√≠gito] Ejemplos:")
for num, dig in ejemplos:
    print(f"{num}, {dig} = {contar_digito(num, dig)}")